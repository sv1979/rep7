{"version":3,"sources":["components/TodoItem.js","components/Activelist.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","react_default","a","createElement","className","type","this","props","onetodo","text","Component","styles","color","fontStyle","Activelist","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todos","length","map","todo","idx","components_TodoItem","key","style","date","getHours","Editor","state","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","alert","preventDefault","onSubmit","name","onChange","App","Date","components_Activelist","components_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAceA,0LATP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aACZJ,EAAAC,EAAAC,cAAA,SAAIG,KAAKC,MAAMC,QAAQC,cANhBC,cCCjBC,EAAS,CAAEC,MAAO,UAAWC,UAAW,UAoB/BC,cAjBX,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMC,KAGVc,MAAQN,EAAKR,MAAMc,MAAMC,OAASP,EAAKR,MAAMc,MAAME,IAAI,SAACC,EAAMC,GAAU,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,CAAUlB,QAASgB,EAAMG,IAAKF,MAAa,GAJvGV,wEAOf,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIyB,MAAOjB,GAAX,0BAA4CL,KAAKC,MAAMsB,KAAKC,WAAa,GAAzE,aAECxB,KAAKe,cAZGX,oBC4BVqB,cA7BX,SAAAA,EAAYxB,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAyB,IACfhB,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAe,GAAAX,KAAAd,KAAMC,KACDyB,MAAQ,CAAEvB,KAAM,IAErBM,EAAKkB,aAAelB,EAAKkB,aAAaC,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KALLA,4EAQNsB,GACT/B,KAAKgC,SAAS,CAAE7B,KAAM4B,EAAME,OAAOC,6CAG1BH,GACTI,MAAM,yBAA2BnC,KAAK0B,MAAMvB,MAC5C4B,EAAMK,kDAIN,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMwC,SAAUrC,KAAK8B,cACjBnC,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOuC,KAAK,OAAOJ,MAAOlC,KAAK0B,MAAMvB,KAAMoC,SAAUvC,KAAK2B,eACtEhC,EAAAC,EAAAC,cAAA,SAAOE,KAAK,oBAxBXK,aCwBNoC,cAlBb,SAAAA,EAAYvC,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAwC,IACjB/B,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAA8B,GAAA1B,KAAAd,KAAMC,KACDyB,MAAQ,CACXH,KAAM,IAAIkB,KACV1B,MAAO,IAJQN,wEASjB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6C,EAAD,CAAY3B,MAAOf,KAAK0B,MAAMX,MAAOQ,KAAMvB,KAAK0B,MAAMH,OACtD5B,EAAAC,EAAAC,cAAC8C,EAAD,cAdUvC,aCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2ec83825.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo__item\">\r\n                <input type=\"checkbox\" />\r\n                <p>{this.props.onetodo.text}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst styles = { color: \"#998900\", fontStyle: 'italic' };\r\n\r\nclass Activelist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    todos = this.props.todos.length ? this.props.todos.map((todo, idx) => { return <TodoItem onetodo={todo} key={idx} /> }) : '';\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"activelist\">\r\n                <h4 style={styles} > It is currently about {this.props.date.getHours() % 12} o'clock!</h4>\r\n\r\n                {this.todos}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Activelist;\r\n","import React, { Component } from 'react';\r\n\r\nclass Editor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { text: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ text: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('A text was submitted: ' + this.state.text);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editor\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"text\" value={this.state.text} onChange={this.handleChange} />\r\n                    <input type=\"submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;","import React, { Component } from 'react';\nimport './App.scss';\nimport Activelist from './components/Activelist';\nimport Editor from './components/Editor';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      todos: []\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Activelist todos={this.state.todos} date={this.state.date} />\n        <Editor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}